using System;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace Lucide.Build.Helpers;

public static class LucideHelpers
{
    public static string GetDirectoryPath(string directory)
    {
        var path = Path.Combine(Directory.GetCurrentDirectory(), directory);
        if (!Directory.Exists(path))
            Directory.CreateDirectory(path);
        return path;
    }

    public static HttpClient CreateHttpClient()
    {
        var client = new HttpClient();
        client.DefaultRequestHeaders.UserAgent.ParseAdd("lucide-osu-framework");
        return client;
    }

    public static StringBuilder CreateClassBuilder(string className)
    {
        var builder = new StringBuilder();

        builder.AppendLine("// <auto-generated />");
        builder.AppendLine();
        builder.AppendLine("// This file is automatically generated by lucide-osu-framework.");
        builder.AppendLine();
        builder.AppendLine("using System.Collections.Generic;");
        builder.AppendLine("using osu.Framework.Graphics.Sprites;");
        builder.AppendLine();
        builder.AppendLine("namespace Lucide.OsuFramework;");
        builder.AppendLine();
        builder.AppendLine($"public static class {className}");
        builder.AppendLine("{");

        return builder;
    }

    internal static async Task<JsonDocument> GetLucideInfoAsync()
    {
        var fileDir = GetDirectoryPath(Path.Combine(Environment.CurrentDirectory, "dist"));
        var fileName = Path.Combine(fileDir, "info.json");

        if (!File.Exists(fileName))
            throw new FileNotFoundException("info.json not found.");

        using var stream = File.OpenRead(fileName);
        return await JsonDocument.ParseAsync(stream).ConfigureAwait(false);
    }
}
